---
// Componente de fondo con partículas animadas
---

<div id="particles-background" class="fixed inset-0 pointer-events-none z-0">
  <!-- Partículas CSS -->
  <div class="particles-css">
    {Array.from({ length: 80 }, (_, i) => (
      <div class={`particle particle-${i + 1}`}></div>
    ))}
  </div>
</div>

<style>
  .particles-css {
    position: absolute;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .particle {
    position: absolute;
    background: linear-gradient(45deg, #6B5B95, #8A7CA8, #A64AC9);
    border-radius: 50%;
    pointer-events: none;
    opacity: 0.3;
    animation: float 15s infinite linear;
    box-shadow: 0 0 10px rgba(107, 91, 149, 0.4);
  }

  /* Diferentes tamaños y posiciones para las partículas */
  .particle:nth-child(odd) {
    width: 4px;
    height: 4px;
    animation-duration: 12s;
    opacity: 0.4;
  }

  .particle:nth-child(even) {
    width: 3px;
    height: 3px;
    animation-duration: 18s;
    opacity: 0.25;
  }

  .particle:nth-child(3n) {
    width: 6px;
    height: 6px;
    animation-duration: 20s;
    opacity: 0.15;
  }

  .particle:nth-child(5n) {
    width: 2px;
    height: 2px;
    animation-duration: 10s;
    opacity: 0.35;
  }

  /* Posiciones iniciales aleatorias */
  .particle-1 { left: 10%; animation-delay: -1s; }
  .particle-2 { left: 20%; animation-delay: -2s; }
  .particle-3 { left: 30%; animation-delay: -3s; }
  .particle-4 { left: 40%; animation-delay: -4s; }
  .particle-5 { left: 50%; animation-delay: -5s; }
  .particle-6 { left: 60%; animation-delay: -6s; }
  .particle-7 { left: 70%; animation-delay: -7s; }
  .particle-8 { left: 80%; animation-delay: -8s; }
  .particle-9 { left: 90%; animation-delay: -9s; }
  .particle-10 { left: 5%; animation-delay: -10s; }
  .particle-11 { left: 15%; animation-delay: -11s; }
  .particle-12 { left: 25%; animation-delay: -12s; }
  .particle-13 { left: 35%; animation-delay: -13s; }
  .particle-14 { left: 45%; animation-delay: -14s; }
  .particle-15 { left: 55%; animation-delay: -15s; }
  .particle-16 { left: 65%; animation-delay: -1.5s; }
  .particle-17 { left: 75%; animation-delay: -2.5s; }
  .particle-18 { left: 85%; animation-delay: -3.5s; }
  .particle-19 { left: 95%; animation-delay: -4.5s; }
  .particle-20 { left: 8%; animation-delay: -5.5s; }
  .particle-21 { left: 18%; animation-delay: -6.5s; }
  .particle-22 { left: 28%; animation-delay: -7.5s; }
  .particle-23 { left: 38%; animation-delay: -8.5s; }
  .particle-24 { left: 48%; animation-delay: -9.5s; }
  .particle-25 { left: 58%; animation-delay: -10.5s; }
  .particle-26 { left: 68%; animation-delay: -11.5s; }
  .particle-27 { left: 78%; animation-delay: -12.5s; }
  .particle-28 { left: 88%; animation-delay: -13.5s; }
  .particle-29 { left: 12%; animation-delay: -14.5s; }
  .particle-30 { left: 22%; animation-delay: -15.5s; }
  .particle-31 { left: 32%; animation-delay: -0.5s; }
  .particle-32 { left: 42%; animation-delay: -1.8s; }
  .particle-33 { left: 52%; animation-delay: -2.8s; }
  .particle-34 { left: 62%; animation-delay: -3.8s; }
  .particle-35 { left: 72%; animation-delay: -4.8s; }
  .particle-36 { left: 82%; animation-delay: -5.8s; }
  .particle-37 { left: 92%; animation-delay: -6.8s; }
  .particle-38 { left: 6%; animation-delay: -7.8s; }
  .particle-39 { left: 16%; animation-delay: -8.8s; }
  .particle-40 { left: 26%; animation-delay: -9.8s; }
  .particle-41 { left: 36%; animation-delay: -10.8s; }
  .particle-42 { left: 46%; animation-delay: -11.8s; }
  .particle-43 { left: 56%; animation-delay: -12.8s; }
  .particle-44 { left: 66%; animation-delay: -13.8s; }
  .particle-45 { left: 76%; animation-delay: -14.8s; }
  .particle-46 { left: 86%; animation-delay: -15.8s; }
  .particle-47 { left: 96%; animation-delay: -0.3s; }
  .particle-48 { left: 14%; animation-delay: -1.3s; }
  .particle-49 { left: 24%; animation-delay: -2.3s; }
  .particle-50 { left: 34%; animation-delay: -3.3s; }
  .particle-51 { left: 44%; animation-delay: -4.3s; }
  .particle-52 { left: 54%; animation-delay: -5.3s; }
  .particle-53 { left: 64%; animation-delay: -6.3s; }
  .particle-54 { left: 74%; animation-delay: -7.3s; }
  .particle-55 { left: 84%; animation-delay: -8.3s; }
  .particle-56 { left: 94%; animation-delay: -9.3s; }
  .particle-57 { left: 4%; animation-delay: -10.3s; }
  .particle-58 { left: 17%; animation-delay: -1.6s; }
  .particle-59 { left: 27%; animation-delay: -2.6s; }
  .particle-60 { left: 37%; animation-delay: -3.6s; }
  .particle-61 { left: 47%; animation-delay: -4.6s; }
  .particle-62 { left: 57%; animation-delay: -5.6s; }
  .particle-63 { left: 67%; animation-delay: -6.6s; }
  .particle-64 { left: 77%; animation-delay: -7.6s; }
  .particle-65 { left: 87%; animation-delay: -8.6s; }
  .particle-66 { left: 97%; animation-delay: -9.6s; }
  .particle-67 { left: 7%; animation-delay: -10.6s; }
  .particle-68 { left: 19%; animation-delay: -1.9s; }
  .particle-69 { left: 29%; animation-delay: -2.9s; }
  .particle-70 { left: 39%; animation-delay: -3.9s; }
  .particle-71 { left: 49%; animation-delay: -4.9s; }
  .particle-72 { left: 59%; animation-delay: -5.9s; }
  .particle-73 { left: 69%; animation-delay: -6.9s; }
  .particle-74 { left: 79%; animation-delay: -7.9s; }
  .particle-75 { left: 89%; animation-delay: -8.9s; }
  .particle-76 { left: 99%; animation-delay: -9.9s; }
  .particle-77 { left: 9%; animation-delay: -10.9s; }
  .particle-78 { left: 21%; animation-delay: -0.7s; }
  .particle-79 { left: 31%; animation-delay: -1.7s; }
  .particle-80 { left: 41%; animation-delay: -2.7s; }

  @keyframes float {
    0% {
      transform: translateY(100vh) translateX(0px) rotate(0deg);
      opacity: 0;
    }
    10% {
      opacity: 0.1;
    }
    90% {
      opacity: 0.1;
    }
    100% {
      transform: translateY(-10vh) translateX(50px) rotate(360deg);
      opacity: 0;
    }
  }

  /* Efecto de resplandor sutil en modo oscuro */
  @media (prefers-color-scheme: dark) {
    .particle {
      box-shadow: 0 0 6px rgba(107, 91, 149, 0.3);
    }
  }

  /* Reducir animaciones si el usuario prefiere menos movimiento */
  @media (prefers-reduced-motion: reduce) {
    .particle {
      animation-duration: 30s;
      opacity: 0.05;
    }
  }
</style>

<script>
  // JavaScript para partículas interactivas adicionales
  class InteractiveParticles {
    canvas: HTMLCanvasElement | null = null;
    ctx: CanvasRenderingContext2D | null = null;
    particles: Array<{
      x: number;
      y: number;
      vx: number;
      vy: number;
      size: number;
      opacity: number;
      hue: number;
    }> = [];
    mousePosition = { x: 0, y: 0 };

    constructor() {
      this.init();
    }

    init() {
      this.createCanvas();
      this.createParticles();
      this.bindEvents();
      this.animate();
    }

    createCanvas() {
      this.canvas = document.createElement('canvas');
      this.canvas.id = 'interactive-particles';
      this.canvas.style.position = 'fixed';
      this.canvas.style.top = '0';
      this.canvas.style.left = '0';
      this.canvas.style.width = '100%';
      this.canvas.style.height = '100%';
      this.canvas.style.pointerEvents = 'none';
      this.canvas.style.zIndex = '1';
      this.canvas.style.opacity = '0.4';
      
      const particleContainer = document.getElementById('particles-background');
      if (particleContainer) {
        particleContainer.appendChild(this.canvas);
      }
      
      this.ctx = this.canvas.getContext('2d');
      this.resizeCanvas();
    }

    resizeCanvas() {
      if (this.canvas) {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
      }
    }

    createParticles() {
      const particleCount = Math.min(80, Math.floor(window.innerWidth / 20));
      
      for (let i = 0; i < particleCount; i++) {
        this.particles.push({
          x: Math.random() * (this.canvas?.width || window.innerWidth),
          y: Math.random() * (this.canvas?.height || window.innerHeight),
          vx: (Math.random() - 0.5) * 0.5,
          vy: (Math.random() - 0.5) * 0.5,
          size: Math.random() * 2 + 1,
          opacity: Math.random() * 0.5 + 0.1,
          hue: Math.random() * 60 + 240 // Tonos azules/morados
        });
      }
    }

    bindEvents() {
      window.addEventListener('resize', () => {
        this.resizeCanvas();
      });

      window.addEventListener('mousemove', (e) => {
        this.mousePosition.x = e.clientX;
        this.mousePosition.y = e.clientY;
      });
    }

    animate() {
      if (!this.ctx || !this.canvas) return;
      
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      this.particles.forEach((particle, index) => {
        // Actualizar posición
        particle.x += particle.vx;
        particle.y += particle.vy;
        
        // Efecto de atracción sutil hacia el mouse
        const dx = this.mousePosition.x - particle.x;
        const dy = this.mousePosition.y - particle.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 150) {
          const force = (150 - distance) / 150;
          particle.vx += (dx / distance) * force * 0.001;
          particle.vy += (dy / distance) * force * 0.001;
        }
        
        // Límites de velocidad
        particle.vx = Math.max(-2, Math.min(2, particle.vx));
        particle.vy = Math.max(-2, Math.min(2, particle.vy));
        
        // Rebote en los bordes
        if (this.canvas) {
          if (particle.x < 0 || particle.x > this.canvas.width) {
            particle.vx *= -0.8;
            particle.x = Math.max(0, Math.min(this.canvas.width, particle.x));
          }
          if (particle.y < 0 || particle.y > this.canvas.height) {
            particle.vy *= -0.8;
            particle.y = Math.max(0, Math.min(this.canvas.height, particle.y));
          }
        }
        
        // Dibujar partícula
        if (this.ctx) {
          this.ctx.beginPath();
          this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
          this.ctx.fillStyle = `hsla(${particle.hue}, 70%, 60%, ${particle.opacity})`;
          this.ctx.fill();
          
          // Conectar partículas cercanas
          this.particles.slice(index + 1).forEach(otherParticle => {
            const dx = particle.x - otherParticle.x;
            const dy = particle.y - otherParticle.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 120 && this.ctx) {
              this.ctx.beginPath();
              this.ctx.moveTo(particle.x, particle.y);
              this.ctx.lineTo(otherParticle.x, otherParticle.y);
              this.ctx.strokeStyle = `hsla(${particle.hue}, 70%, 60%, ${(120 - distance) / 120 * 0.1})`;
              this.ctx.lineWidth = 1;
              this.ctx.stroke();
            }
          });
        }
      });
      
      requestAnimationFrame(() => this.animate());
    }
  }

  // Inicializar las partículas cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new InteractiveParticles();
    });
  } else {
    new InteractiveParticles();
  }
</script>
